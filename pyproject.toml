[project]
name = "dot"
version = "0.1.0"
description = "Dotfiles management automation script"
readme = "README.md"
requires-python = ">=3.11"
dependencies = []

[tool.uv]
dev-dependencies = [
  # Testing
  "gp-libs",
  "pytest",
  "pytest-asyncio",
  "pytest-rerunfailures",
  "pytest-mock",
  "pytest-watcher",
  "pytest-docker-tools",
  # Coverage
  "codecov",
  "coverage",
  "pytest-cov",
  # Lint
  "ruff",
  "mypy",
]

[dependency-groups]
testing = [
  "gp-libs",
  "pytest",
  "pytest-asyncio",
  "pytest-rerunfailures",
  "pytest-mock",
  "pytest-watcher",
  "pytest-docker-tools",
]
coverage =[
  "codecov",
  "coverage",
  "pytest-cov",
]
lint = [
  "ruff",
  "mypy",
]

[tool.pytest.ini_options]
testpaths = ["test_dot.py"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"
asyncio_mode = "auto"
markers = [
    "asyncio: marks tests as requiring asyncio",
]

[tool.coverage.run]
source = ["dot"]
omit = ["test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.mypy]
python_version = "3.12"
strict = true
files = [
  "dot.py",
  "test_dot.py",
]

# Relax some rules for test files
[[tool.mypy.overrides]]
module = "test_dot"
check_untyped_defs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false

[tool.ruff]
target-version = "py312"
exclude = [
    ".tmux/",
    ".tmuxp/",
    "config/",
]

[tool.ruff.lint]
select = [
  "E", # pycodestyle
  "F", # pyflakes
  "I", # isort
  "UP", # pyupgrade
  "A", # flake8-builtins
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "COM", # flake8-commas
  "EM", # flake8-errmsg
  "Q", # flake8-quotes
  "PTH", # flake8-use-pathlib
  "SIM", # flake8-simplify
  "TRY", # Trycertatops
  "PERF", # Perflint
  "RUF", # Ruff-specific rules
  "D", # pydocstyle
  "FA100",  # future annotations
]
ignore = [
  "COM812", # missing trailing comma, ruff format conflict
  "D213", # no-blank-line-before-class
  "D203", # incorrect-blank-line-before-class
]
extend-safe-fixes = [
  "UP006",
  "UP007",
]
pyupgrade.keep-runtime-typing = false

[tool.ruff.lint.isort]
combine-as-imports = true
required-imports = [
  "from __future__ import annotations",
]
